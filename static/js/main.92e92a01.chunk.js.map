{"version":3,"sources":["store/films.js","store/copyFilms.js","store/errorOfLoading.js","store/loading.js","store/store.js","ErrorOfLoading.js","Films.js","CharactersFromUrl.js","OpenedFilm.js","App.js","serviceWorker.js","index.js"],"names":["setFilms","films","type","getFilms","currentFilms","action","setCopyFilms","copyFilms","getCopyFilms","currentCopyFilms","setErrorOfLoading","errorOfLoad","getErrorOfLoading","getLoading","loading","rootReducer","combineReducers","loadError","getURL","dispatch","a","loadedFilms","fetch","then","json","Promise","all","results","store","createStore","applyMiddleware","thunk","loadAgain","URLData","connect","state","className","onClick","storesFuncs","storeFuncs","search","value","location","useLocation","history","useHistory","searchParams","URLSearchParams","useEffect","placeholder","onChange","e","filteredFilms","filter","film","title","toLowerCase","includes","target","sort","b","map","key","episode_id","to","set","setTimeout","push","toString","CharactersFromUrl","URLs","useState","characters","setCharacters","charactersURLs","setCharactersURLs","setLoading","getTypeOfUrl","charactersArray","i","length","URL","loadedPersons","person","persons","getCharactersFromURL","character","index","name","filteredFilm","get","opening_crawl","director","producer","release_date","planets","starships","species","vehicles","App","path","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92e92a01.chunk.js","sourcesContent":["export const setFilms = films => ({\r\n    type: 'FILMS',\r\n    films\r\n});\r\n\r\nconst getFilms = (currentFilms = [], action) => {\r\n    switch (action.type) {\r\n        case 'FILMS':\r\n            return action.films;\r\n        default:\r\n            return currentFilms;\r\n    }\r\n}\r\n\r\nexport default getFilms;","export const setCopyFilms = copyFilms => ({\r\n    type: 'COPYFILMS',\r\n    copyFilms\r\n});\r\n\r\nconst getCopyFilms = (currentCopyFilms = [], action) => {\r\n    switch (action.type) {\r\n        case 'COPYFILMS':\r\n            return action.copyFilms;\r\n        default:\r\n            return currentCopyFilms;\r\n    }\r\n}\r\n\r\nexport default getCopyFilms;","export const setErrorOfLoading = errorOfLoad => ({\r\n    type: \"ERROR_OF_LOAD\",\r\n    errorOfLoad,\r\n});\r\n\r\nconst getErrorOfLoading = (errorOfLoad = true, action) => {\r\n    switch (action.type) {\r\n        case \"ERROR_OF_LOAD\":\r\n            return action.errorOfLoad;\r\n        default:\r\n            return errorOfLoad;\r\n    }\r\n}\r\n\r\nexport default getErrorOfLoading;","export const setLoading = loading => ({\r\n    type: \"LOADING\",\r\n    loading\r\n})\r\n\r\nconst getLoading = (loading = true, action) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return action.loading;\r\n        default:\r\n            return loading;\r\n    }\r\n}\r\n\r\nexport default getLoading;","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport getFilms, { setFilms } from './films';\r\nimport getCopyFilms, { setCopyFilms } from './copyFilms';\r\nimport getErrorOfLoading, { setErrorOfLoading } from './errorOfLoading';\r\nimport getLoading, {setLoading} from './loading';\r\n\r\nconst rootReducer = combineReducers({\r\n    films: getFilms,\r\n    copyFilms: getCopyFilms,\r\n    loadError: getErrorOfLoading,\r\n    loading: getLoading,\r\n});\r\n\r\nexport const search = (value) => dispatch => {\r\n    dispatch(setCopyFilms(value));\r\n}\r\n\r\nexport const getURL = () => async (dispatch) => {\r\n    try {\r\n        dispatch(setErrorOfLoading(false));\r\n        const URL = 'https://swapi.co/api/films/';\r\n        const loadedFilms = fetch(URL).then(films => films.json());\r\n        const [films] = await Promise.all([loadedFilms])\r\n        dispatch(setFilms(films.results));\r\n        dispatch(setCopyFilms(films.results));\r\n        dispatch(setLoading(false));\r\n    } catch {\r\n        dispatch(setErrorOfLoading(true));\r\n        return false;\r\n    }\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as URLData from './store/store';\r\n\r\nconst ErroOfLoading = ({ getURL }) => {\r\n\r\n    return (\r\n        <div className=\"ErrorWrap\">\r\n            <h2 className=\"Error\">\r\n                Error of Loading \r\n            </h2>\r\n            <button \r\n                type=\"button\" \r\n                className=\"try-again\"\r\n                onClick={() => {getURL()}}\r\n            >\r\n                Try again\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst loadAgain = {\r\n    getURL: URLData.getURL,\r\n}\r\n\r\nconst getData = state => ({})\r\n\r\nexport default connect(getData, loadAgain)(ErroOfLoading);\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as storeFuncs from './store/store';\r\nimport ErroOfLoading from './ErrorOfLoading';\r\nimport { Link, useLocation, useHistory } from 'react-router-dom';\r\n\r\nconst Films = ({ \r\n  getURL, \r\n  films, \r\n  loadError, \r\n  getLoading, \r\n  copyFilms, \r\n  search \r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const searchParams = new URLSearchParams(location.search);\r\n\r\n  useEffect(() => {\r\n    getURL();\r\n  }, [])\r\n\r\n  const setURLParams = (title) => {\r\n    searchParams.set('film', title);\r\n    setTimeout(() => {\r\n      history.push({ search: searchParams.toString() });\r\n    }, 0)\r\n  }\r\n\r\n  const searchFilms = (e) => {\r\n    const filteredFilms = [...films].filter(film => {\r\n      return film.title.toLowerCase().includes(e.target.value.toLowerCase());\r\n    });\r\n\r\n    search(filteredFilms);\r\n  }\r\n\r\n  const sortFilms = () => {\r\n    search([...films].sort((a, b) => {\r\n      if (copyFilms[0].title > copyFilms[1].title) {\r\n        if (a.title > b.title) {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      } else {\r\n        if (a.title > b.title) {\r\n          return -1;\r\n        } else {\r\n          return 1;\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  if (loadError) {\r\n    return <ErroOfLoading />\r\n  }\r\n\r\n  if (getLoading) {\r\n    return <h1 className=\"loading\">...LOADING</h1>\r\n  }\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"starwars__h1\">\r\n            STARWARS FILMS\r\n        </h1>\r\n\r\n        <ul className=\"films__ul\">\r\n          <li>\r\n            <form action=\"\" className=\"films__form\">\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"...search\" \r\n                className=\"films__input\"\r\n                onChange={searchFilms}\r\n              />\r\n              <button \r\n                type=\"button\" \r\n                className=\"films__button\"\r\n                onClick={sortFilms}\r\n              > \r\n                sort by name\r\n              </button>\r\n            </form>\r\n          </li>\r\n          {\r\n            copyFilms.map(film => {\r\n              return (\r\n                <li key={film.episode_id}>\r\n                  <Link \r\n                    to=\"/film\"\r\n                    className=\"films__a\"\r\n                    onClick={() => setURLParams(film.title)}\r\n                  >\r\n                    {film.title}\r\n                  </Link>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n      </>\r\n    );\r\n}\r\n\r\nconst storesFuncs = {\r\n  getURL: storeFuncs.getURL,\r\n  search: storeFuncs.search\r\n}\r\n  \r\nconst getAPI = state => ({\r\n  films: state.films,\r\n  copyFilms: state.copyFilms,\r\n  loadError: state.loadError,\r\n  getLoading: state.loading\r\n})\r\n\r\nexport default connect(getAPI, storesFuncs)(Films);","import React, { useState } from 'react';\r\n\r\nconst CharactersFromUrl = ({ URLs }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [charactersURLs, setCharactersURLs] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const getTypeOfUrl = () => {\r\n        if (URLs[0] && URLs[0].includes('planet')) {\r\n            return 'planets:';\r\n        } else if (URLs[0] && URLs[0].includes('people')) {\r\n            return 'characters:';\r\n        } else if (URLs[0] && URLs[0].includes('starships')) {\r\n            return 'starships:'\r\n        } else if (URLs[0] && URLs[0].includes('vehicles')) {\r\n            return 'vehicles:'\r\n        } else if (URLs[0] && URLs[0].includes('species')) {\r\n            return 'scpecies:'\r\n        } \r\n    }\r\n\r\n    const getCharactersFromURL = async () => {\r\n            const charactersArray = [];\r\n            for (let i = 0; i < URLs.length; i++) {\r\n                const URL = URLs[i];\r\n                const loadedPersons = fetch(URL).then(person => person.json());\r\n                const [persons] = await Promise.all([loadedPersons]);\r\n                charactersArray.push(persons);\r\n            }\r\n\r\n            setCharacters(charactersArray);\r\n            setCharactersURLs(URLs);\r\n            setLoading(false);\r\n    }\r\n\r\n    if (URLs && charactersURLs !== URLs) {\r\n        getCharactersFromURL();\r\n    }\r\n\r\n    if (loading === true) {\r\n        return (\r\n            <div className=\"opened-film__details\">\r\n                <p>\r\n                    {getTypeOfUrl()}\r\n                </p>\r\n                <p className=\"opened-film__loading\">\r\n                    ...Loading\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"opened-film__details\">\r\n            <p>\r\n                {getTypeOfUrl()}\r\n            </p>\r\n            <ul>\r\n                {\r\n                    characters.map((character, index) => (\r\n                        <li key= {character.name}>\r\n                            {character.name}\r\n                            {index === characters.length - 1 ? \".\" : \",\"}\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharactersFromUrl;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport CharactersFromUrl from './CharactersFromUrl';\r\n\r\nconst OpenedFilm = ({ films }) => {\r\n\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const filteredFilm = films.filter(film => (\r\n        film.title === searchParams.get('film')\r\n    ));\r\n\r\n    return (\r\n        <div className=\"opened-film\">\r\n            <Link to=\"/\" className=\"opened-film__back\">\r\n                Back\r\n            </Link>\r\n            {filteredFilm.map(film => (\r\n                <section \r\n                    className=\"opened-film__section\" \r\n                    key={film.episode_id}\r\n                >\r\n                    <h2 className=\"opened-film__title\">\r\n                        {film.title}\r\n                    </h2>\r\n                    <p className=\"opened-film__crawl\">\r\n                        {film.opening_crawl}\r\n                    </p>\r\n                    <div className=\"opened-film__authors-and-date\">\r\n                        <p className=\"opened-film__create-info\">\r\n                            director: {film.director}\r\n                        </p>\r\n                        <p className=\"opened-film__create-info\">\r\n                            producer: {film.producer}\r\n                        </p>\r\n                        <p className=\"opened-film__create-info\">\r\n                            release date: {film.release_date}\r\n                        </p>\r\n                    </div>\r\n                    <CharactersFromUrl URLs={filteredFilm[0].characters}/>\r\n                    <CharactersFromUrl URLs={filteredFilm[0].planets}/>\r\n                    <CharactersFromUrl URLs={filteredFilm[0].starships}/>\r\n                    <CharactersFromUrl URLs={filteredFilm[0].species}/>\r\n                    <CharactersFromUrl URLs={filteredFilm[0].vehicles}/>\r\n                </section>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getAPI = state => ({\r\n    films: state.films,\r\n})\r\n\r\nexport default connect(getAPI)(OpenedFilm);","import React from 'react';\nimport './styles/style.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Films from './Films';\nimport OpenedFilm from './OpenedFilm';\n\nfunction App() {\n\n  return (\n      <HashRouter>\n        <Route path=\"/\" exact>\n          <Films />\n        </Route>\n        <Route path='/film'>\n          <OpenedFilm />\n        </Route>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n    <Provider store={ store }><App /></Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}